# Snakemake rules to generate simulated
# read data
#
# Author: Maurits Evers
# License: GPLv3
# Original date: 16-10-2016
# Last changed: 16-02-2017


# Main rule to simulate ChIP-seq reads
# Input is a fa/fa.gz reference sequence and a csv file of the size of
# all reference sequences in folder config["refdir"]
# Output is a set of (replicate) fastq files
# Note 1: The number of replicates (nReps) is taken from config.yaml,
#         so we need to dynamically determine output files based on nReps
# Note 2: We determine the genome size "inline" using awk on the sizeFile
#         This is ugly but seems to work...
rule simulate_ChIP_reads:
    input:
        fasta = join(config["refdir"], "{version}", "{chr}.fa.gz"),
        refIdx = join(config["refdir"], "{version}/ref_index.csv")
    output:
        expand(join(config["rawdir"], \
            "simul/{{version}}/{{chr}}/reads_{{simName}}_rep{idxRep}.fastq"), \
            idxRep = range(1, config["ChIPsim"]["nReps"] + 1))
    log:
        "logs/simulate_ChIP_reads_{version}_{chr}_{simName}.log"
    params:
        cmd     = config["ChIPsim"]["cmd"],
        outdir  = join(config["rawdir"], "simul", "{version}/{chr}"),
        simName = "{simName}",
        EF      = config["ChIPsim"]["EF"],
        seed    = "1234",
        nReads  = config["ChIPsim"]["nReads"],
        nReps   = config["ChIPsim"]["nReps"]
    version: "1.0"
    shell:
        """
            {params.cmd} \
            -r {input.fasta} \
            --EF {params.EF} \
            --seed {params.seed} \
            --outdir {params.outdir} \
            --simName {params.simName} \
            --nReads {params.nReads} \
            --gSize `awk -F ',' '{{sum+=$2}}END{{print sum}}' {input.refIdx}` \
            --nReps {params.nReps} &> {log}
        """
